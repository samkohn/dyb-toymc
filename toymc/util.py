"""Utility functions for toymc."""

import math


def within_circle(radius, trial):
    """Generate trials until the result lies within a circle of given radius.

    Parameters
    ----------
    radius : number
        The radius of the circle to bound the result of ``trial``
    trial : function of no parameters returning (number, number)
        The function to execute repeatedly until the return values are
        the coordinates of a point lying within the circle

    Returns
    -------
    coordinates : (number, number)
        Coordinates generated by the trial function that lie within the
        given circle
    """
    x, y = radius, radius
    while math.hypot(x, y) > radius:
        x, y = trial()
    return x, y


def xy_z_func(xy_func, z_func):
    """Get a function that calls 2 functions and flattens the result.

    xy_func and z_func should accept identical parameters.

    Parameters
    ----------
    xy_func : function of any parameters returning (number, number)
        The function to compute the x and y coordinates
    z_func : function of any parameters returning number
        The function to compute the z coordinate

    Returns
    -------
    xyz_func : function of any parameters returning (number, number, number)
        A function that calls xy_func and z_func, then aggregates the
        results in a single tuple
    """

    def xyz_func(*args, **kwargs):
        xy = xy_func(*args, **kwargs)
        z = z_func(*args, **kwargs)
        return (xy[0], xy[1], z)

    return xyz_func


def rng_uniform_circle(radius):
    """Create a function of an RNG that returns a uniform point within a circle.

    Parameters
    ----------
    radius : number
        The radius of the circle to get points from

    Returns
    -------
    generator : function of rng returning (number, number)
        A function which, when supplied with an RNG, returns a point
        drawn uniformly from within the circle of supplied radius

    """

    def uniform_within_circle(rng):
        return within_circle(radius, lambda: rng.uniform(-radius, radius, size=2))

    return uniform_within_circle


def rng_uniform_cylinder(radius, height):
    """Create a function of an RNG that returns a uniform point within a cylinder.

    The cylinder is assumed to be centered at the origin with its axis
    lying along the Z axis.

    Parameters
    ----------
    radius : number
        The radius of the cylinder to get points from
    height : number
        The height of the cylinder to get points from

    Returns
    -------
    generator : function of rng returning (number, number, number)
        A function which, when supplied with an RNG, returns a point
        drawn uniformly from within the cylinder of supplied radius and
        height.

    """
    return xy_z_func(
        rng_uniform_circle(radius), lambda rng: rng.uniform(-height / 2, height / 2)
    )


def rng_correlated_expo_cylinder(radius, height, exp_scale):
    """Create a that returns a correlated point within a cylinder.

    The cylinder is assumed to be centered at the origin with its axis
    lying along the Z axis.

    The new point's coordinates are determined by drawing from an
    exponential distribution once per coordinate to determine the
    displacement. The procedure is repeated until the new point lies
    within the specified cylinder volume.

    Parameters
    ----------
    radius : number
        The radius of the cylinder to get points from
    height : number
        The height of the cylinder to get points from
    exp_scale : number
        The scale parameter for the exponential (1/scale *
        exp(-X/scale))

    Returns
    -------
    generator : function of (rng, (x, y, z)) returning (x, y, z)
        A function which, when supplied with an RNG, and an original
        point, returns a point drawn from within the cylinder of
        supplied radius and height based on a correlation to the
        original point.
    """

    def correlated_expo_cylinder(rng, start_position):
        """Generate a new point correlated to the start position.

        Parameters
        ----------
        rng : numpy random Generator object
            The random generator to use
        start_position : (number, number, number)
            The coordinates of the position that the new point should be
            correlated to

        Returns
        -------
        position : (number, number, number)
            The x, y, and z coordinates of the new correlated position
        """

        def trial():
            displacement = rng.exponential(exp_scale, size=2)
            sign_on_x = rng.choice([1, -1])
            sign_on_y = rng.choice([1, -1])
            x = start_position[0] + sign_on_x * displacement[0]
            y = start_position[1] + sign_on_y * displacement[1]
            return (x, y)

        x, y = within_circle(radius, trial)

        def z_trial_trick():
            # To iterate on the z coordinate, just return (z, 0)
            displacement = rng.exponential(exp_scale)
            sign_on_z = rng.choice([1, -1])
            z = start_position[2] + sign_on_z * displacement
            return (z, 0)

        z, _ = within_circle(height / 2, z_trial_trick)
        return (x, y, z)

    return correlated_expo_cylinder
